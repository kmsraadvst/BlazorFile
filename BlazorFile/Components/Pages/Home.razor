@page "/"

@using System.Net.Http.Headers

@inject HttpClient Http


<p>
    <label>
        upload files for @_maxAllowedFiles
        <InputFile OnChange="OnInputFileChanged" multiple />
    </label>
</p>

@if (_files.Count > 0)
{
    <div>
        <ul>
            @foreach (var file in _files)
            {
                <li>
                    File: @file.Name
                    <br/>
                    @if (FileUpload(_uploadResults, file.Name, out var result))
                    {
                        <span>Stored File Name: @result.StoredFileName</span>
                    }
                    else
                    {
                        <span>
                            There was an error uplaoading the file [error: @result.ErrorCode]
                        </span>
                    }
                </li>
            }
        </ul>
    </div>
}


@code {
    private List<File> _files = new();
    private List<UploadResult> _uploadResults = new();
    private int _maxAllowedFiles = 3;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        bool upload = false;
        long maxFileSize = 1024 * 1500;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(_maxAllowedFiles))
        {
            if (_uploadResults.SingleOrDefault(f => f.FileName == file.Name) is null)
            {
                try
                {
                    _files.Add(new() { Name = file.Name });

                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                    content.Add(fileContent, "\"files\"", file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"file '{file.Name}' not uploaded error: 6 {ex.Message}");

                    _uploadResults.Add(new()
                    {
                        FileName = file.Name,
                        ErrorCode = 6,
                        Uploaded = false,
                    });
                }
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/filesave", content);

            var newUploadResult = await response.Content.ReadFromJsonAsync<IList<UploadResult>>();

            if (newUploadResult is not null)
            {
                _uploadResults = _uploadResults.Concat(newUploadResult).ToList();
            }
        }
    }

    private static bool FileUpload(
        IList<UploadResult> uploadResults,
        string? fileName,
        out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            Console.WriteLine($"file '{fileName}' not uploaded, error: 5");
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }

}